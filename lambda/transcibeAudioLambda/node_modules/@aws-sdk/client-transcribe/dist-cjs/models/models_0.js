"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutputLocationType = exports.ToxicityCategory = exports.SubtitleFormat = exports.Type = exports.TranscriptionJobStatus = exports.Specialty = exports.MedicalContentIdentificationType = exports.MedicalScribeJobStatus = exports.MedicalScribeLanguageCode = exports.MedicalScribeParticipantRole = exports.NotFoundException = exports.VocabularyState = exports.ModelStatus = exports.LimitExceededException = exports.InternalFailureException = exports.ConflictException = exports.CLMLanguageCode = exports.Rule = exports.TranscriptFilterType = exports.SentimentValue = exports.InputType = exports.VocabularyFilterMethod = exports.RedactionType = exports.RedactionOutput = exports.PiiEntityType = exports.MediaFormat = exports.LanguageCode = exports.ParticipantRole = exports.CallAnalyticsJobStatus = exports.BaseModelName = exports.BadRequestException = void 0;
const TranscribeServiceException_1 = require("./TranscribeServiceException");
class BadRequestException extends TranscribeServiceException_1.TranscribeServiceException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.Message = opts.Message;
    }
}
exports.BadRequestException = BadRequestException;
exports.BaseModelName = {
    NARROW_BAND: "NarrowBand",
    WIDE_BAND: "WideBand",
};
exports.CallAnalyticsJobStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    QUEUED: "QUEUED",
};
exports.ParticipantRole = {
    AGENT: "AGENT",
    CUSTOMER: "CUSTOMER",
};
exports.LanguageCode = {
    AB_GE: "ab-GE",
    AF_ZA: "af-ZA",
    AR_AE: "ar-AE",
    AR_SA: "ar-SA",
    AST_ES: "ast-ES",
    AZ_AZ: "az-AZ",
    BA_RU: "ba-RU",
    BE_BY: "be-BY",
    BG_BG: "bg-BG",
    BN_IN: "bn-IN",
    BS_BA: "bs-BA",
    CA_ES: "ca-ES",
    CKB_IQ: "ckb-IQ",
    CKB_IR: "ckb-IR",
    CS_CZ: "cs-CZ",
    CY_WL: "cy-WL",
    DA_DK: "da-DK",
    DE_CH: "de-CH",
    DE_DE: "de-DE",
    EL_GR: "el-GR",
    EN_AB: "en-AB",
    EN_AU: "en-AU",
    EN_GB: "en-GB",
    EN_IE: "en-IE",
    EN_IN: "en-IN",
    EN_NZ: "en-NZ",
    EN_US: "en-US",
    EN_WL: "en-WL",
    EN_ZA: "en-ZA",
    ES_ES: "es-ES",
    ES_US: "es-US",
    ET_ET: "et-ET",
    EU_ES: "eu-ES",
    FA_IR: "fa-IR",
    FI_FI: "fi-FI",
    FR_CA: "fr-CA",
    FR_FR: "fr-FR",
    GL_ES: "gl-ES",
    GU_IN: "gu-IN",
    HA_NG: "ha-NG",
    HE_IL: "he-IL",
    HI_IN: "hi-IN",
    HR_HR: "hr-HR",
    HU_HU: "hu-HU",
    HY_AM: "hy-AM",
    ID_ID: "id-ID",
    IS_IS: "is-IS",
    IT_IT: "it-IT",
    JA_JP: "ja-JP",
    KAB_DZ: "kab-DZ",
    KA_GE: "ka-GE",
    KK_KZ: "kk-KZ",
    KN_IN: "kn-IN",
    KO_KR: "ko-KR",
    KY_KG: "ky-KG",
    LG_IN: "lg-IN",
    LT_LT: "lt-LT",
    LV_LV: "lv-LV",
    MHR_RU: "mhr-RU",
    MI_NZ: "mi-NZ",
    MK_MK: "mk-MK",
    ML_IN: "ml-IN",
    MN_MN: "mn-MN",
    MR_IN: "mr-IN",
    MS_MY: "ms-MY",
    MT_MT: "mt-MT",
    NL_NL: "nl-NL",
    NO_NO: "no-NO",
    OR_IN: "or-IN",
    PA_IN: "pa-IN",
    PL_PL: "pl-PL",
    PS_AF: "ps-AF",
    PT_BR: "pt-BR",
    PT_PT: "pt-PT",
    RO_RO: "ro-RO",
    RU_RU: "ru-RU",
    RW_RW: "rw-RW",
    SI_LK: "si-LK",
    SK_SK: "sk-SK",
    SL_SI: "sl-SI",
    SO_SO: "so-SO",
    SR_RS: "sr-RS",
    SU_ID: "su-ID",
    SV_SE: "sv-SE",
    SW_BI: "sw-BI",
    SW_KE: "sw-KE",
    SW_RW: "sw-RW",
    SW_TZ: "sw-TZ",
    SW_UG: "sw-UG",
    TA_IN: "ta-IN",
    TE_IN: "te-IN",
    TH_TH: "th-TH",
    TL_PH: "tl-PH",
    TR_TR: "tr-TR",
    TT_RU: "tt-RU",
    UG_CN: "ug-CN",
    UK_UA: "uk-UA",
    UZ_UZ: "uz-UZ",
    VI_VN: "vi-VN",
    WO_SN: "wo-SN",
    ZH_CN: "zh-CN",
    ZH_TW: "zh-TW",
    ZU_ZA: "zu-ZA",
};
exports.MediaFormat = {
    AMR: "amr",
    FLAC: "flac",
    M4A: "m4a",
    MP3: "mp3",
    MP4: "mp4",
    OGG: "ogg",
    WAV: "wav",
    WEBM: "webm",
};
exports.PiiEntityType = {
    ADDRESS: "ADDRESS",
    ALL: "ALL",
    BANK_ACCOUNT_NUMBER: "BANK_ACCOUNT_NUMBER",
    BANK_ROUTING: "BANK_ROUTING",
    CREDIT_DEBIT_CVV: "CREDIT_DEBIT_CVV",
    CREDIT_DEBIT_EXPIRY: "CREDIT_DEBIT_EXPIRY",
    CREDIT_DEBIT_NUMBER: "CREDIT_DEBIT_NUMBER",
    EMAIL: "EMAIL",
    NAME: "NAME",
    PHONE: "PHONE",
    PIN: "PIN",
    SSN: "SSN",
};
exports.RedactionOutput = {
    REDACTED: "redacted",
    REDACTED_AND_UNREDACTED: "redacted_and_unredacted",
};
exports.RedactionType = {
    PII: "PII",
};
exports.VocabularyFilterMethod = {
    MASK: "mask",
    REMOVE: "remove",
    TAG: "tag",
};
exports.InputType = {
    POST_CALL: "POST_CALL",
    REAL_TIME: "REAL_TIME",
};
exports.SentimentValue = {
    MIXED: "MIXED",
    NEGATIVE: "NEGATIVE",
    NEUTRAL: "NEUTRAL",
    POSITIVE: "POSITIVE",
};
exports.TranscriptFilterType = {
    EXACT: "EXACT",
};
var Rule;
(function (Rule) {
    Rule.visit = (value, visitor) => {
        if (value.NonTalkTimeFilter !== undefined)
            return visitor.NonTalkTimeFilter(value.NonTalkTimeFilter);
        if (value.InterruptionFilter !== undefined)
            return visitor.InterruptionFilter(value.InterruptionFilter);
        if (value.TranscriptFilter !== undefined)
            return visitor.TranscriptFilter(value.TranscriptFilter);
        if (value.SentimentFilter !== undefined)
            return visitor.SentimentFilter(value.SentimentFilter);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(Rule = exports.Rule || (exports.Rule = {}));
exports.CLMLanguageCode = {
    DE_DE: "de-DE",
    EN_AU: "en-AU",
    EN_GB: "en-GB",
    EN_US: "en-US",
    ES_US: "es-US",
    HI_IN: "hi-IN",
    JA_JP: "ja-JP",
};
class ConflictException extends TranscribeServiceException_1.TranscribeServiceException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
exports.ConflictException = ConflictException;
class InternalFailureException extends TranscribeServiceException_1.TranscribeServiceException {
    constructor(opts) {
        super({
            name: "InternalFailureException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalFailureException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalFailureException.prototype);
        this.Message = opts.Message;
    }
}
exports.InternalFailureException = InternalFailureException;
class LimitExceededException extends TranscribeServiceException_1.TranscribeServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.LimitExceededException = LimitExceededException;
exports.ModelStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
};
exports.VocabularyState = {
    FAILED: "FAILED",
    PENDING: "PENDING",
    READY: "READY",
};
class NotFoundException extends TranscribeServiceException_1.TranscribeServiceException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.NotFoundException = NotFoundException;
exports.MedicalScribeParticipantRole = {
    CLINICIAN: "CLINICIAN",
    PATIENT: "PATIENT",
};
exports.MedicalScribeLanguageCode = {
    EN_US: "en-US",
};
exports.MedicalScribeJobStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    QUEUED: "QUEUED",
};
exports.MedicalContentIdentificationType = {
    PHI: "PHI",
};
exports.Specialty = {
    PRIMARYCARE: "PRIMARYCARE",
};
exports.TranscriptionJobStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    QUEUED: "QUEUED",
};
exports.Type = {
    CONVERSATION: "CONVERSATION",
    DICTATION: "DICTATION",
};
exports.SubtitleFormat = {
    SRT: "srt",
    VTT: "vtt",
};
exports.ToxicityCategory = {
    ALL: "ALL",
};
exports.OutputLocationType = {
    CUSTOMER_BUCKET: "CUSTOMER_BUCKET",
    SERVICE_BUCKET: "SERVICE_BUCKET",
};
